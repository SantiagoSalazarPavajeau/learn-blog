I"<p>On the <a href="https://dev.to/santispavajeau/refactoring-apps-from-class-based-react-with-redux-to-functional-hooks-n58">first part</a> we looked at a simple example in refactoring class-based React to functional React with Hooks through <code class="language-plaintext highlighter-rouge">useState()</code> and <code class="language-plaintext highlighter-rouge">useEffect()</code> hooks . This blog will be focusing on <code class="language-plaintext highlighter-rouge">useSelector()</code> and <code class="language-plaintext highlighter-rouge">useDispatch()</code> to finally make Redux to be compatible with functional React with Hooks. First, to clarify, the hooks that we are going to look into in this blog are part of ‘Redux Hooks’. So they are actually imported as follows:</p>
:ET