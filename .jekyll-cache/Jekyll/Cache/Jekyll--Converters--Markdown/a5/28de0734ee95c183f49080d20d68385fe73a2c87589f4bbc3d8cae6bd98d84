I"q<p>At this point of the Flatiron program we are acquiring some fundamental knowledge and skills that allow us to start to see the big picture of Software Engineering.</p>

<p>We are starting to see the fundamentals that make up the relationship between front end and back end programming with Ruby. We started by learning back end fundamentals from procedural and object oriented Ruby to then move to SQL and object relational mapping (ORM) and thus be able to manipulate information with objects or classes, and also with databases. So after going through these lessons it has started to become clear that only the front end is missing so the user can interact with our code.</p>

<p>Essentially this happens through the browser which establishes a connection between the client (user) and the server (code). And so the user can go into a website, maybe enter their information to sign up into the website and this information will be saved in our database through our back end code and thus the website will remember this user and their information.</p>

<p>So historically the first websites when the internet started, were used just to display text through HTML. For example a news website that showed news articles and did not accept user input. Nowadays, when we talk about websites we mostly see web applications where the user can do a bit more interaction like inputting information, posting media, etc.</p>

<p>So software applications can now run on the web just like they used to run on the desktop, and web applications for browsers can be used in almost any device.</p>

<p>With this understanding it is easy to see how full stack web development can built products and tools that allow a business for example to offer and sell their products (e-commerce), have invoices and accounting to be automated (ERP) and also the management of client/customer contact (CRM). These are all types of applications that can be developed with the same principles of management of information and data.</p>

<p>Nonetheless, having this insight mainly means that there is much more to be learned (than before) about the technologies that make this possible.</p>

:ET